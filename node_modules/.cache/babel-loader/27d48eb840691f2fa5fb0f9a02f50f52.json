{"ast":null,"code":"var _jsxFileName = \"/home/chedi/Desktop/jammming/src/Components/App/App.js\";\nimport './App.css';\nimport { SearchBar } from '../SearchBar/SearchBar';\nimport { SearchResults } from '../SearchResults/SearchResults';\nimport { Playlist } from '../Playlist/Playlist';\nimport React from 'react';\nimport { spotify } from '../../util/Spotify.js';\nimport Swal from 'sweetalert2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      SearchResults: [],\n      playListName: 'New PlayList',\n      playListTracks: []\n    };\n    this.addTracks = this.addTracks.bind(this);\n    this.removeTracks = this.removeTracks.bind(this);\n    this.changeName = this.changeName.bind(this);\n    this.savePlayList = this.savePlayList.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  componentDidMount() {\n    spotify.getAccessToken();\n  }\n\n  addTracks(track) {\n    let arr = this.state.playListTracks;\n    let i = 0;\n\n    while (i < arr.length) {\n      if (track.id === arr[i].id) {\n        break;\n      }\n\n      i++;\n    }\n\n    if (i === arr.length) {\n      arr.push(track);\n      this.setState({\n        playListTracks: arr\n      });\n    } else window.alert(\"track already exist in playlist\");\n  }\n\n  removeTracks(track) {\n    let arr = this.state.playListTracks;\n    let i = 0;\n\n    while (i < arr.length) {\n      if (track.id === arr[i].id) break;\n      i++;\n    }\n\n    if (i !== arr.length) arr.splice(i, 1);\n    this.setState({\n      playListTracks: arr\n    });\n  }\n\n  changeName(name) {\n    if (name) {\n      this.setState({\n        playListName: name\n      });\n    }\n  }\n\n  async search(searchTerm) {\n    let result = await spotify.search(searchTerm);\n    let tracks = await result.json();\n\n    if (tracks['tracks']) {\n      let searchedTracks = tracks['tracks'].items.map(track => {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        };\n      });\n      this.setState({\n        SearchResults: searchedTracks\n      });\n    } else {\n      this.setState({\n        SearchResults: []\n      });\n    }\n  }\n\n  async savePlayList() {\n    let promiseUserId = await spotify.getUserID();\n    let ObjectUserId = await promiseUserId.json();\n    let userId = ObjectUserId.id;\n    let promisePlayList = await spotify.createPlayList(userId, this.state.playListName);\n    let playList = await promisePlayList.json();\n    const playListId = playList.id;\n    const uris = this.state.playListTracks.map(track => {\n      return track.uri;\n    });\n    let promisedtracktoPlaylist = await spotify.saveTrackstoPlayList(playListId, uris);\n    let adddedTrackToPlaylist = await promisedtracktoPlaylist.json();\n\n    if (adddedTrackToPlaylist) {\n      Swal.fire({\n        icon: 'success',\n        text: `Playlist ${this.state.playListName} added successfully`\n      });\n    } else {\n      Swal.fire({\n        icon: 'error',\n        title: 'Oops...',\n        text: `Problem occured connecting to Spotify`\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Ja\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"highlight\",\n          children: \"mmm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), \"ing\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n          onSearch: this.search\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App-playlist\",\n          children: [/*#__PURE__*/_jsxDEV(SearchResults, {\n            searchResult: this.state.SearchResults,\n            onAdd: this.addTracks\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Playlist, {\n            onSave: this.savePlayList,\n            playListName: this.state.playListName,\n            playListTracks: this.state.playListTracks,\n            onRemove: this.removeTracks,\n            changeName: this.changeName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/chedi/Desktop/jammming/src/Components/App/App.js"],"names":["SearchBar","SearchResults","Playlist","React","spotify","Swal","App","Component","constructor","props","state","playListName","playListTracks","addTracks","bind","removeTracks","changeName","savePlayList","search","componentDidMount","getAccessToken","track","arr","i","length","id","push","setState","window","alert","splice","name","searchTerm","result","tracks","json","searchedTracks","items","map","artist","artists","album","uri","promiseUserId","getUserID","ObjectUserId","userId","promisePlayList","createPlayList","playList","playListId","uris","promisedtracktoPlaylist","saveTrackstoPlayList","adddedTrackToPlaylist","fire","icon","text","title","render"],"mappings":";AAAA,OAAO,WAAP;AACA,SAAQA,SAAR,QAAwB,wBAAxB;AACA,SAAQC,aAAR,QAA4B,gCAA5B;AACA,SAAQC,QAAR,QAAuB,sBAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,uBAAtB;AACA,OAAOC,IAAP,MAAiB,aAAjB;;AACA,OAAO,MAAMC,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAkC;AACvCC,EAAAA,WAAW,CAACC,KAAD,EACT;AACG,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAET,MAAAA,aAAa,EAAG,EAAlB;AACEU,MAAAA,YAAY,EAAE,cADhB;AAEEC,MAAAA,cAAc,EAAG;AAFnB,KAAb;AAID,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKG,YAAL,GAAoB,KAAKA,YAAL,CAAkBH,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKI,MAAL,GAAc,KAAKA,MAAL,CAAYJ,IAAZ,CAAiB,IAAjB,CAAd;AACD;;AACDK,EAAAA,iBAAiB,GACjB;AACGf,IAAAA,OAAO,CAACgB,cAAR;AACF;;AAEDP,EAAAA,SAAS,CAACQ,KAAD,EACT;AACI,QAAIC,GAAG,GAAG,KAAKZ,KAAL,CAAWE,cAArB;AACE,QAAIW,CAAC,GAAG,CAAR;;AACD,WAAQA,CAAC,GAAGD,GAAG,CAACE,MAAhB,EACA;AACE,UAAIH,KAAK,CAACI,EAAN,KAAaH,GAAG,CAACC,CAAD,CAAH,CAAOE,EAAxB,EACA;AACG;AACF;;AACDF,MAAAA,CAAC;AACF;;AACJ,QAAIA,CAAC,KAAKD,GAAG,CAACE,MAAd,EACC;AACGF,MAAAA,GAAG,CAACI,IAAJ,CAASL,KAAT;AACA,WAAKM,QAAL,CAAc;AACZf,QAAAA,cAAc,EAAEU;AADJ,OAAd;AAGF,KANF,MAOEM,MAAM,CAACC,KAAP,CAAa,iCAAb;AAEH;;AACDd,EAAAA,YAAY,CAACM,KAAD,EACZ;AACE,QAAIC,GAAG,GAAG,KAAKZ,KAAL,CAAWE,cAArB;AACC,QAAIW,CAAC,GAAG,CAAR;;AACC,WAAQA,CAAC,GAAGD,GAAG,CAACE,MAAhB,EACA;AACG,UAAKH,KAAK,CAACI,EAAN,KAAaH,GAAG,CAACC,CAAD,CAAH,CAAOE,EAAzB,EACC;AACAF,MAAAA,CAAC;AACJ;;AACA,QAAKA,CAAC,KAAKD,GAAG,CAACE,MAAf,EACCF,GAAG,CAACQ,MAAJ,CAAWP,CAAX,EAAa,CAAb;AACF,SAAKI,QAAL,CAAc;AACVf,MAAAA,cAAc,EAAEU;AADN,KAAd;AAGH;;AACCN,EAAAA,UAAU,CAACe,IAAD,EACV;AACE,QAAIA,IAAJ,EACC;AACG,WAAKJ,QAAL,CAAc;AACXhB,QAAAA,YAAY,EAAEoB;AADH,OAAd;AAGF;AACH;;AACY,QAANb,MAAM,CAACc,UAAD,EACb;AACE,QAAIC,MAAM,GAAG,MAAM7B,OAAO,CAACc,MAAR,CAAec,UAAf,CAAnB;AACA,QAAIE,MAAM,GAAG,MAAMD,MAAM,CAACE,IAAP,EAAnB;;AACC,QAAKD,MAAM,CAAC,QAAD,CAAX,EACA;AACG,UAAIE,cAAc,GAAGF,MAAM,CAAC,QAAD,CAAN,CAAiBG,KAAjB,CAAuBC,GAAvB,CAA2BjB,KAAK,IACrD;AACI,eAAO;AAAEI,UAAAA,EAAE,EAAEJ,KAAK,CAACI,EAAZ;AAAiBM,UAAAA,IAAI,EAAEV,KAAK,CAACU,IAA7B;AAAoCQ,UAAAA,MAAM,EAAElB,KAAK,CAACmB,OAAN,CAAc,CAAd,EAAiBT,IAA7D;AAAoEU,UAAAA,KAAK,EAAEpB,KAAK,CAACoB,KAAN,CAAYV,IAAvF;AAA8FW,UAAAA,GAAG,EAAErB,KAAK,CAACqB;AAAzG,SAAP;AACH,OAHoB,CAArB;AAKA,WAAKf,QAAL,CAAc;AACZ1B,QAAAA,aAAa,EAAGmC;AADJ,OAAd;AAGF,KAVD,MAWC;AACG,WAAKT,QAAL,CAAc;AACX1B,QAAAA,aAAa,EAAG;AADL,OAAd;AAGF;AACJ;;AACgB,QAAZgB,YAAY,GACjB;AACE,QAAI0B,aAAa,GAAG,MAAMvC,OAAO,CAACwC,SAAR,EAA1B;AACA,QAAIC,YAAY,GAAG,MAAMF,aAAa,CAACR,IAAd,EAAzB;AACA,QAAIW,MAAM,GAAGD,YAAY,CAACpB,EAA1B;AACA,QAAIsB,eAAe,GAAG,MAAM3C,OAAO,CAAC4C,cAAR,CAAuBF,MAAvB,EAA8B,KAAKpC,KAAL,CAAWC,YAAzC,CAA5B;AACA,QAAIsC,QAAQ,GAAG,MAAMF,eAAe,CAACZ,IAAhB,EAArB;AACA,UAAMe,UAAU,GAAGD,QAAQ,CAACxB,EAA5B;AACA,UAAM0B,IAAI,GAAG,KAAKzC,KAAL,CAAWE,cAAX,CAA0B0B,GAA1B,CAA8BjB,KAAK,IAC9C;AACG,aAAOA,KAAK,CAACqB,GAAb;AACF,KAHU,CAAb;AAKA,QAAIU,uBAAuB,GAAG,MAAMhD,OAAO,CAACiD,oBAAR,CAA6BH,UAA7B,EAAwCC,IAAxC,CAApC;AACA,QAAIG,qBAAqB,GAAG,MAAMF,uBAAuB,CAACjB,IAAxB,EAAlC;;AACG,QAAKmB,qBAAL,EAA4B;AACnBjD,MAAAA,IAAI,CAACkD,IAAL,CAAU;AACZC,QAAAA,IAAI,EAAE,SADM;AAEZC,QAAAA,IAAI,EAAG,YAAW,KAAK/C,KAAL,CAAWC,YAAa;AAF9B,OAAV;AAGA,KAJT,MAKM;AACCN,MAAAA,IAAI,CAACkD,IAAL,CAAU;AACRC,QAAAA,IAAI,EAAE,OADE;AAERE,QAAAA,KAAK,EAAE,SAFC;AAGRD,QAAAA,IAAI,EAAG;AAHC,OAAV;AAKA;AACX;;AAEJE,EAAAA,MAAM,GACH;AACI,wBACE;AAAA,8BACE;AAAA,sCAAM;AAAM,UAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAN;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,gCACI,QAAC,SAAD;AAAa,UAAA,QAAQ,EAAE,KAAKzC;AAA5B;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACE,QAAC,aAAD;AAAe,YAAA,YAAY,EAAE,KAAKR,KAAL,CAAWT,aAAxC;AAAuD,YAAA,KAAK,EAAE,KAAKY;AAAnE;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,QAAD;AAAW,YAAA,MAAM,EAAE,KAAKI,YAAxB;AAAsC,YAAA,YAAY,EAAE,KAAKP,KAAL,CAAWC,YAA/D;AAA6E,YAAA,cAAc,EAAE,KAAKD,KAAL,CAAWE,cAAxG;AAAwH,YAAA,QAAQ,EAAE,KAAKG,YAAvI;AAAqJ,YAAA,UAAU,EAAE,KAAKC;AAAtK;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAYH;;AAlIkC","sourcesContent":["import './App.css';\nimport {SearchBar} from '../SearchBar/SearchBar'; \nimport {SearchResults} from '../SearchResults/SearchResults'; \nimport {Playlist} from '../Playlist/Playlist' ;\nimport React from 'react';\nimport {spotify} from '../../util/Spotify.js';\nimport Swal from 'sweetalert2';\nexport class App extends React.Component {\n  constructor(props)\n    {\n       super(props); \n       this.state = { SearchResults : [] , \n                      playListName: 'New PlayList' , \n                      playListTracks : [] \n      } ; \n      this.addTracks = this.addTracks.bind(this) ; \n      this.removeTracks = this.removeTracks.bind(this); \n      this.changeName = this.changeName.bind(this); \n      this.savePlayList = this.savePlayList.bind(this); \n      this.search = this.search.bind(this); \n    } \n    componentDidMount()\n    { \n       spotify.getAccessToken();  \n    }\n\n    addTracks(track) \n    { \n        let arr = this.state.playListTracks; \n          let i = 0 ; \n         while ( i < arr.length ) \n         { \n           if (track.id === arr[i].id)\n           {\n              break; \n           } \n           i++ ; \n         }\n      if( i === arr.length)\n       { \n          arr.push(track); \n          this.setState({\n            playListTracks: arr  \n         });\n       }else \n        window.alert(\"track already exist in playlist\"); \n       \n    }\n    removeTracks(track)\n    {\n      let arr = this.state.playListTracks;  \n       let i = 0 ; \n        while ( i < arr.length)\n        {\n           if ( track.id === arr[i].id)\n            break; \n            i++ ; \n        }\n         if ( i !== arr.length) \n          arr.splice(i,1); \n        this.setState({\n            playListTracks: arr \n        });  \n    }\n      changeName(name) \n      { \n        if (name) \n         {\n            this.setState({\n               playListName: name\n            })\n         }\n      }\n       async search(searchTerm)\n      { \n        let result = await spotify.search(searchTerm); \n        let tracks = await result.json() ;\n         if ( tracks['tracks'] )\n         {\n            let searchedTracks = tracks['tracks'].items.map(track => \n            {\n                return { id: track.id , name: track.name , artist: track.artists[0].name , album: track.album.name , uri: track.uri  }\n            }  \n            ); \n            this.setState({ \n              SearchResults : searchedTracks \n            })\n         }else \n          {\n             this.setState({\n                SearchResults : []\n             })\n          } \n      }\n     async savePlayList() \n      { \n        let promiseUserId = await spotify.getUserID() ; \n        let ObjectUserId = await promiseUserId.json() ; \n        let userId = ObjectUserId.id ; \n        let promisePlayList = await spotify.createPlayList(userId,this.state.playListName); \n        let playList = await promisePlayList.json() ; \n        const playListId = playList.id; \n        const uris = this.state.playListTracks.map(track => \n          { \n             return track.uri ; \n          })\n\n        let promisedtracktoPlaylist = await spotify.saveTrackstoPlayList(playListId,uris); \n        let adddedTrackToPlaylist = await promisedtracktoPlaylist.json(); \n           if ( adddedTrackToPlaylist) {\n                    Swal.fire({\n                  icon: 'success',\n                  text: `Playlist ${this.state.playListName} added successfully`\n                }) } else \n                 {\n                  Swal.fire({\n                    icon: 'error',\n                    title: 'Oops...',\n                    text: `Problem occured connecting to Spotify`\n                  })\n                 }\n      }\n\n   render() \n      {\n          return (\n            <div>\n              <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n              <div className=\"App\">\n                  <SearchBar   onSearch={this.search}  />\n                <div className=\"App-playlist\">\n                  <SearchResults searchResult={this.state.SearchResults} onAdd={this.addTracks}/>\n                  <Playlist  onSave={this.savePlayList} playListName={this.state.playListName} playListTracks={this.state.playListTracks} onRemove={this.removeTracks} changeName={this.changeName}/>\n                </div>\n              </div>\n            </div>\n          );\n      } \n}\n\n\n"]},"metadata":{},"sourceType":"module"}